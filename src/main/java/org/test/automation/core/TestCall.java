package org.test.automation.core;

import org.apache.log4j.Logger;

/**
 * <p>
 * This class is to represent each runnable line OF a .atc file.
 * </p>
 * 
 * <p>
 * It is used for both the running of the tests and the generating of the report
 * after. This class is generated by
 * {@link org.test.automation.core.AutomatedTestCaseRunner} when it reads the
 * test cases.
 * </p>
 * 
 * 
 * @author roblovell
 * 
 */
public final class TestCall {

	private final static Logger LOGGER = Logger.getLogger(TestCall.class);

	private final String command;

	private final TextCallMethod method;

	private TestCallResult result;

	TestCall(String command, TextCallMethod method)
	{
		this.command = command;
		this.method = method;
	}

	/**
	 * This executes the method call based on the command that was read from
	 * the .atc file and sets the result;
	 */
	public void runCommand()
	{
		LOGGER.trace("ENTRY:runCommand for command " +command);
		Throwable error = null;
		try
		{
			method.callMethod(command);
		} catch (Throwable e)
		{
			LOGGER.error("ERROR:runTestCase() " + e.getMessage(), e);
			error = e;
		}
		result = new TestCallResult(error);
		LOGGER.trace("EXIT:runCommand for command " +command);
	}

	/**
	 * This returns the text string representation of the method call
	 * 
	 * @return the string read from the .atc file
	 */
	public String getCommand()
	{
		return command;
	}

	/**
	 * boolean flag that tell if this tests step has been executed.
	 * 
	 * @return returns true if and only if the test step has been executed.
	 */
	public boolean hasCommandRun()
	{
		return result != null;
	}

	/**This returns the result of running the  command.
	 * @return the result of the command, if hasCommandRun if false then will return null
	 */
	public TestCallResult getResult()
	{
		return result;
	}

}
